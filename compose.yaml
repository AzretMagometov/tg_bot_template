services:
  bot:
    build:
      context: .
      dockerfile: ./Dockerfile
    image: bot:latest
    container_name: ${COMPOSE_PROJECT_NAME}-bot
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./logs:/logs
    depends_on:
      redis:
        condition: service_healthy

    networks:
      - app_network


    # Если вы используете webhook и хотите пробросить порт
    # ports:
    #   - "8443:8443"

  redis:
    image: "redis:7-alpine"
    container_name: ${COMPOSE_PROJECT_NAME}-redis
    restart: always
    env_file:
      - .env
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - ./redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s


volumes:
  redis_data:

networks:
  app_network:



# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

