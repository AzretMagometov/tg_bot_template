services:
  bot:
    build:
      context: .
      dockerfile: ./Dockerfile
    image: bot:latest
    container_name: ${COMPOSE_PROJECT_NAME}-bot
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./logs:/logs
    depends_on:
      redis:
        condition: service_healthy
      pgbouncer:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8443 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    # Uncomment to expose webhook port
    # ports:
    #   - "8443:8443"

  redis:
    image: "redis:7-alpine"
    container_name: ${COMPOSE_PROJECT_NAME}-redis
    restart: always
    env_file:
      - .env
    volumes:
      - ./redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s

  postgres:
    image: postgres:17-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-postgres
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
      - PGDATA='/var/lib/postgresql/data/pgdata'
    networks:
      - app_network
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  pgbouncer:
    image: edoburu/pgbouncer
    container_name: ${COMPOSE_PROJECT_NAME}-pgbouncer
    restart: always
    env_file:
      - .env
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASS}
      - DB_HOST=postgres
      - POOL_MODE=session
      - MAX_CLIENT_CONN=100
      - DEFAULT_POOL_SIZE=20
      - AUTH_TYPE=scram-sha-256
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network
    ports:
      - "${DB_PORT}:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "postgres", "-p", "5432"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgbackup:
    container_name: ${COMPOSE_PROJECT_NAME}-pgbackup
    image: prodrigestivill/postgres-backup-local
    restart: always
    volumes:
      - ./backups_data:/backups
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_EXTRA_OPTS=-Z9 --schema=public --blobs
      - SCHEDULE=@every 0h30m00s
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
      - HEALTHCHECK_PORT=81
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h postgres -U ${DB_USER} || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

volumes:
  redis_data:
  postgres_data:
  backups_data:

networks:
  app_network:
